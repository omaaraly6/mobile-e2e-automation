name: Maestro Android Test on macOS

on:
  workflow_dispatch:
    inputs:
      apk_artifact_name:
        description: 'Name of the APK artifact to download'
        required: true
        default: 'android-pr-build-takosan-112'
      source_repo:
        description: 'Source repository (owner/repo)'
        required: true
        default: 'zeal-io/white-label-apps'
      source_run_id:
        description: 'Source workflow run ID'
        required: true
        default: '16124407462'
      project_name:
        description: 'Project name'
        required: true
        default: 'takosan'
      pr_number:
        description: 'PR number'
        required: true
        default: '796'

jobs:
  test:
    runs-on: [self-hosted, macOS]
    steps:
      - uses: actions/checkout@v3
      
      - uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'
          
      - uses: android-actions/setup-android@v2
        
      - name: Install Maestro CLI
        run: |
          brew tap mobile-dev-inc/tap
          brew install maestro
          
      - name: Set Maestro Timeout Environment Variable
        run: echo "MAESTRO_DRIVER_STARTUP_TIMEOUT=1000000" >> $GITHUB_ENV
      
      - name: Download APK from source repository
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              console.log('📥 Downloading APK artifact from source repository...');
              
              // Get the artifact details from the source repository
              const [owner, repo] = '${{ github.event.inputs.source_repo }}'.split('/');
              const runId = '${{ github.event.inputs.source_run_id }}';
              const artifactName = '${{ github.event.inputs.apk_artifact_name }}';
              
              console.log(`Source: ${owner}/${repo}, Run: ${runId}, Artifact: ${artifactName}`);
              
              // List artifacts to find the one we need
              const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
                owner: owner,
                repo: repo,
                run_id: runId
              });
              
              const targetArtifact = artifacts.artifacts.find(artifact => 
                artifact.name === artifactName
              );
              
              if (!targetArtifact) {
                throw new Error(`Artifact '${artifactName}' not found in run ${runId}`);
              }
              
              console.log(`✅ Found artifact: ${targetArtifact.name} (ID: ${targetArtifact.id})`);
              
              // Download the artifact
              const downloadUrl = `https://api.github.com/repos/${owner}/${repo}/actions/artifacts/${targetArtifact.id}/zip`;
              console.log('Download URL:', downloadUrl);
              
              const { execSync } = require('child_process');
              const curlCommand = `curl -L -H "Authorization: token ${process.env.GITHUB_TOKEN}" -H "Accept: application/vnd.github.v3+json" "${downloadUrl}" -o artifact.zip`;
              execSync(curlCommand, { stdio: 'inherit' });
              
              // Extract the zip file
              execSync('unzip -o artifact.zip', { stdio: 'inherit' });
              execSync('rm artifact.zip', { stdio: 'inherit' });
              
              // Find the APK file
              const fs = require('fs');
              const files = fs.readdirSync('.');
              console.log('Extracted files:', files);
              
              const apkFile = files.find(file => file.endsWith('.apk'));
              if (apkFile) {
                console.log(`✅ APK downloaded: ${apkFile}`);
                core.setOutput('apk-file', apkFile);
              } else {
                throw new Error('No APK file found in downloaded artifact');
              }
              
            } catch (error) {
              console.error('❌ Failed to download APK:', error.message);
              throw error;
            }
      
      - name: Run Maestro Tests on Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          arch: arm64-v8a
          ram-size: 2048M
          target: default
          script: |
            echo "Waiting for emulator to boot..."
            boot_completed=""
            until [[ "$boot_completed" == "1" ]]; do
              sleep 5
              boot_completed=$(adb -e shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')
              echo "boot_completed=$boot_completed"
            done
            echo "Emulator is ready."
            
            # Install the downloaded APK
            APK_FILE=$(find . -name "*.apk" | head -1)
            if [ -n "$APK_FILE" ]; then
              echo "Installing APK: $APK_FILE"
              adb install "$APK_FILE"
            else
              echo "No APK file found!"
              exit 1
            fi
            
            # Run Maestro tests
            maestro test android/ 