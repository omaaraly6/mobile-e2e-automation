name: Maestro Android Test on macOS

on:
  workflow_dispatch:
    inputs:
      apk_artifact_name:
        description: 'Name of the APK artifact to download'
        required: true
        default: 'android-pr-build-takosan-112'
      source_repo:
        description: 'Source repository (owner/repo)'
        required: true
        default: 'zeal-io/white-label-apps'
      source_run_id:
        description: 'Source workflow run ID'
        required: true
        default: '16123259003'
      project_name:
        description: 'Project name'
        required: true
        default: 'takosan'
      pr_number:
        description: 'PR number'
        required: true
        default: '796'

jobs:
  test:
    runs-on: [self-hosted, zeal-gcp-ubuntu-large]
    steps:
      - uses: actions/checkout@v3
      
      - uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'
          
      - uses: android-actions/setup-android@v2
        
      - name: Install Maestro CLI
        run: |
          curl -Ls "https://get.maestro.mobile.dev" | bash
          export PATH="$PATH":"$HOME/.maestro/bin"
          echo "$HOME/.maestro/bin" >> $GITHUB_PATH
          
      - name: Set Maestro Timeout Environment Variable
        run: echo "MAESTRO_DRIVER_STARTUP_TIMEOUT=1000000" >> $GITHUB_ENV
      
      - name: Debug Input Parameters
        run: |
          echo "🔍 Debug Input Parameters:"
          echo "apk_artifact_name: ${{ github.event.inputs.apk_artifact_name }}"
          echo "source_repo: ${{ github.event.inputs.source_repo }}"
          echo "source_run_id: ${{ github.event.inputs.source_run_id }}"
          echo "project_name: ${{ github.event.inputs.project_name }}"
          echo "pr_number: ${{ github.event.inputs.pr_number }}"
      
      - name: Download APK from source repository
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CROSS_REPO_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            try {
              console.log('📥 Downloading APK artifact from source repository...');
              
              // Check which token we're using
              const hasCrossRepoToken = '${{ secrets.CROSS_REPO_TOKEN }}' !== '';
              console.log('🔍 Token check - CROSS_REPO_TOKEN exists:', hasCrossRepoToken);
              if (!hasCrossRepoToken) {
                console.log('⚠️  No CROSS_REPO_TOKEN found - using GITHUB_TOKEN (may not work for cross-repo access)');
              } else {
                console.log('✅ Using CROSS_REPO_TOKEN for cross-repository access');
              }
              
              // Test token permissions
              console.log('🔍 Testing token permissions...');
              try {
                const { data: user } = await github.rest.users.getAuthenticated();
                console.log(`✅ Token authenticated as: ${user.login}`);
                
                // Test access to source repository
                const [owner, repo] = '${{ github.event.inputs.source_repo }}'.split('/');
                const { data: sourceRepo } = await github.rest.repos.get({
                  owner: owner,
                  repo: repo
                });
                console.log(`✅ Token has access to source repository: ${sourceRepo.full_name}`);
                
              } catch (permError) {
                console.error('❌ Token permission test failed:', permError.message);
                console.error('This indicates the token does not have the required permissions');
              }
              
              // Get the artifact details from the source repository
              const [owner, repo] = '${{ github.event.inputs.source_repo }}'.split('/');
              const runId = '${{ github.event.inputs.source_run_id }}';
              const artifactName = '${{ github.event.inputs.apk_artifact_name }}';
              
              console.log(`Source: ${owner}/${repo}, Run: ${runId}, Artifact: ${artifactName}`);
              
              // First, verify the workflow run exists
              try {
                const { data: workflowRun } = await github.rest.actions.getWorkflowRun({
                  owner: owner,
                  repo: repo,
                  run_id: runId
                });
                console.log(`✅ Workflow run found: #${workflowRun.id} (${workflowRun.status})`);
                console.log(`Created: ${workflowRun.created_at}`);
                console.log(`Updated: ${workflowRun.updated_at}`);
              } catch (runError) {
                console.error(`❌ Workflow run ${runId} not found:`, runError.message);
                throw new Error(`Workflow run ${runId} not found in ${owner}/${repo}`);
              }
              
              // List all artifacts in the workflow run
              console.log('🔍 Listing all artifacts in the workflow run...');
              const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
                owner: owner,
                repo: repo,
                run_id: runId
              });
              
              console.log(`Found ${artifacts.artifacts.length} artifacts:`);
              artifacts.artifacts.forEach(artifact => {
                console.log(`- ${artifact.name} (ID: ${artifact.id}, Size: ${artifact.size_in_bytes} bytes, Created: ${artifact.created_at})`);
              });
              
              // Find the target artifact
              const targetArtifact = artifacts.artifacts.find(artifact => 
                artifact.name === artifactName
              );
              
              if (!targetArtifact) {
                console.error(`❌ Artifact '${artifactName}' not found in run ${runId}`);
                console.error('Available artifacts:');
                artifacts.artifacts.forEach(artifact => {
                  console.error(`  - ${artifact.name}`);
                });
                throw new Error(`Artifact '${artifactName}' not found in run ${runId}. Available: ${artifacts.artifacts.map(a => a.name).join(', ')}`);
              }
              
              console.log(`✅ Found artifact: ${targetArtifact.name} (ID: ${targetArtifact.id})`);
              
              // Download the artifact using GitHub API directly
              console.log('📥 Downloading artifact using GitHub API...');
              
              const fs = require('fs');
              const https = require('https');
              
              try {
                // Use the GitHub API to get the download URL
                const { data: artifactData } = await github.rest.actions.downloadArtifact({
                  owner: owner,
                  repo: repo,
                  artifact_id: targetArtifact.id,
                  archive_format: 'zip'
                });
                
                console.log('✅ GitHub API download successful!');
                console.log(`Downloaded ${artifactData.byteLength} bytes`);
                
                // Write the binary data to a file
                fs.writeFileSync('artifact.zip', Buffer.from(artifactData));
                
                // Check what we downloaded
                const stats = fs.statSync('artifact.zip');
                console.log(`Downloaded file size: ${stats.size} bytes`);
                
                if (stats.size < 1000) {
                  // File is too small, likely an error response
                  const content = fs.readFileSync('artifact.zip', 'utf8');
                  console.log('Downloaded content (likely error):', content);
                  throw new Error(`Download failed - got error response: ${content}`);
                }
                
                // Extract the zip file
                console.log('Extracting artifact...');
                const { execSync } = require('child_process');
                execSync('unzip -o artifact.zip', { stdio: 'inherit' });
                execSync('rm artifact.zip', { stdio: 'inherit' });
                
              } catch (apiError) {
                console.error('❌ GitHub API download failed:', apiError.message);
                
                // Fallback: try with curl using the CROSS_REPO_TOKEN directly
                console.log('🔄 Trying curl fallback with direct token...');
                
                try {
                  const { execSync } = require('child_process');
                  
                  // Get the token from the secret directly
                  const crossRepoToken = '${{ secrets.CROSS_REPO_TOKEN }}';
                  console.log(`Using CROSS_REPO_TOKEN: ${crossRepoToken ? crossRepoToken.substring(0, 8) + '...' : 'undefined'}`);
                  
                  const downloadUrl = `https://api.github.com/repos/${owner}/${repo}/actions/artifacts/${targetArtifact.id}/zip`;
                  const curlCommand = `curl -L -H "Authorization: Bearer ${crossRepoToken}" -H "Accept: application/vnd.github.v3+json" -H "User-Agent: GitHub-Actions" "${downloadUrl}" -o artifact.zip`;
                  
                  console.log('Executing curl command with direct token...');
                  execSync(curlCommand, { stdio: 'inherit' });
                  
                  const stats = fs.statSync('artifact.zip');
                  console.log(`Fallback download size: ${stats.size} bytes`);
                  
                  if (stats.size < 1000) {
                    const content = fs.readFileSync('artifact.zip', 'utf8');
                    console.log('Fallback content:', content);
                    throw new Error(`Fallback download also failed: ${content}`);
                  }
                  
                  console.log('Extracting artifact...');
                  execSync('unzip -o artifact.zip', { stdio: 'inherit' });
                  execSync('rm artifact.zip', { stdio: 'inherit' });
                  
                } catch (fallbackError) {
                  console.error('❌ All download methods failed:', fallbackError.message);
                  throw new Error(`Failed to download artifact after multiple attempts: ${fallbackError.message}`);
                }
              }
              
              // Find the APK file
              const files = fs.readdirSync('.');
              console.log('Extracted files:', files);
              
              const apkFile = files.find(file => file.endsWith('.apk'));
              if (apkFile) {
                console.log(`✅ APK downloaded: ${apkFile}`);
                core.setOutput('apk-file', apkFile);
              } else {
                throw new Error('No APK file found in downloaded artifact');
              }
              
            } catch (error) {
              console.error('❌ Failed to download APK:', error.message);
              console.error('Error details:', error);
              
              // Provide helpful debugging information
              console.log('');
              console.log('🔧 Debugging Tips:');
              console.log('1. Check if the source workflow run exists and completed successfully');
              console.log('2. Verify the artifact name matches exactly');
              console.log('3. Ensure the artifact hasn\'t expired (artifacts are deleted after 90 days)');
              console.log('4. Check if the source repository is accessible');
              console.log('');
              console.log('📋 Manual APK Download Instructions:');
              console.log('1. Go to the source workflow run');
              console.log('2. Download the APK artifact manually');
              console.log('3. Upload it to this workflow run');
              
              throw error;
            }
      
      - name: Create test script
        run: |
          cat > test_script.sh << 'EOF'
          #!/bin/bash
          set -e
          
          # Function to run commands with timeout
          run_with_timeout() {
            timeout "$1" "$@" || {
              echo "❌ Command timed out after $1 seconds: ${@:2}"
              return 1
            }
          }
          
          echo "🔍 Looking for APK file..."
          APK_FILE=$(find . -name "*.apk" | head -1)
          if [ -n "$APK_FILE" ]; then
            echo "📱 Installing APK: $APK_FILE"
            echo "📊 APK file size: $(ls -lh "$APK_FILE" | awk '{print $5}')"
            
            # Check emulator status
            echo "🔍 Checking emulator status..."
            adb devices -l
            adb shell getprop sys.boot_completed
            
            # Uninstall any previous version first
            echo "🗑️ Uninstalling previous version..."
            timeout 30s adb uninstall com.zeal.takosan || echo "No previous installation found"
            
            # Install APK with timeout and verbose output
            echo "📦 Installing APK (this may take 1-2 minutes)..."
            run_with_timeout 180s adb install -r "$APK_FILE"
            echo "✅ APK installed successfully"
            
            # Verify installation immediately
            echo "🔍 Checking if app was installed..."
            adb shell pm list packages | grep takosan || {
              echo "❌ App not found after installation!"
              echo "📋 Available packages containing 'zeal':"
              adb shell pm list packages | grep zeal || echo "No zeal packages found"
              exit 1
            }
            
            # Grant permissions that might be needed
            echo "🔐 Granting permissions..."
            timeout 10s adb shell pm grant com.zeal.takosan android.permission.ACCESS_FINE_LOCATION || echo "Location permission failed"
            timeout 10s adb shell pm grant com.zeal.takosan android.permission.ACCESS_COARSE_LOCATION || echo "Coarse location permission failed"
            
            # Final verification
            echo "✅ Final verification..."
            INSTALLED_PACKAGE=$(adb shell pm list packages | grep takosan | head -1)
            echo "📱 Installed: $INSTALLED_PACKAGE"
            
          else
            echo "❌ No APK file found!"
            echo "📁 Current directory contents:"
            ls -la
            exit 1
          fi
          
          echo "📋 Checking available flows..."
          timeout 60s maestro test android/ordering_apps/ --config android/ordering_apps/config.yaml --dry-run || {
            echo "ℹ️  Dry run failed, trying without config..."
            timeout 60s maestro test android/ordering_apps/ --dry-run || echo "Both dry runs failed"
          }
          
          echo "🧪 Running Maestro ordering app flows..."
          maestro test android/ordering_apps/ --config android/ordering_apps/config.yaml
          EOF
          chmod +x test_script.sh

      - name: Run Maestro Tests on Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 28
          arch: x86_64
          ram-size: 1024M
          disk-size: 2048M
          target: default
          disable-animations: true
          emulator-options: -no-window -gpu swiftshader_indirect -no-snapshot -noaudio -no-boot-anim -memory 1024 -cores 2 -skin 1080x1920 -netdelay none -netspeed full
          script: ./test_script.sh
        timeout-minutes: 30