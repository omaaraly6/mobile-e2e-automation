name: Maestro Android Test on macOS

on:
  workflow_dispatch:
    inputs:
      apk_artifact_name:
        description: 'Name of the APK artifact to download'
        required: true
        default: 'android-pr-build-takosan-112'
      source_repo:
        description: 'Source repository (owner/repo)'
        required: true
        default: 'zeal-io/white-label-apps'
      source_run_id:
        description: 'Source workflow run ID'
        required: true
        default: '16123259003'
      project_name:
        description: 'Project name'
        required: true
        default: 'takosan'
      pr_number:
        description: 'PR number'
        required: true
        default: '796'

jobs:
  test:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      
      - uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'
          
      - uses: android-actions/setup-android@v2
        
      - name: Install Maestro CLI
        run: |
          brew tap mobile-dev-inc/tap
          brew install maestro
          
      - name: Set Maestro Timeout Environment Variable
        run: echo "MAESTRO_DRIVER_STARTUP_TIMEOUT=1000000" >> $GITHUB_ENV
      
      - name: Debug Input Parameters
        run: |
          echo "🔍 Debug Input Parameters:"
          echo "apk_artifact_name: ${{ github.event.inputs.apk_artifact_name }}"
          echo "source_repo: ${{ github.event.inputs.source_repo }}"
          echo "source_run_id: ${{ github.event.inputs.source_run_id }}"
          echo "project_name: ${{ github.event.inputs.project_name }}"
          echo "pr_number: ${{ github.event.inputs.pr_number }}"
      
      - name: Download APK from source repository
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              console.log('📥 Downloading APK artifact from source repository...');
              
              // Get the artifact details from the source repository
              const [owner, repo] = '${{ github.event.inputs.source_repo }}'.split('/');
              const runId = '${{ github.event.inputs.source_run_id }}';
              const artifactName = '${{ github.event.inputs.apk_artifact_name }}';
              
              console.log(`Source: ${owner}/${repo}, Run: ${runId}, Artifact: ${artifactName}`);
              
              // First, verify the workflow run exists
              try {
                const { data: workflowRun } = await github.rest.actions.getWorkflowRun({
                  owner: owner,
                  repo: repo,
                  run_id: runId
                });
                console.log(`✅ Workflow run found: #${workflowRun.id} (${workflowRun.status})`);
                console.log(`Created: ${workflowRun.created_at}`);
                console.log(`Updated: ${workflowRun.updated_at}`);
              } catch (runError) {
                console.error(`❌ Workflow run ${runId} not found:`, runError.message);
                throw new Error(`Workflow run ${runId} not found in ${owner}/${repo}`);
              }
              
              // List all artifacts in the workflow run
              console.log('🔍 Listing all artifacts in the workflow run...');
              const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
                owner: owner,
                repo: repo,
                run_id: runId
              });
              
              console.log(`Found ${artifacts.artifacts.length} artifacts:`);
              artifacts.artifacts.forEach(artifact => {
                console.log(`- ${artifact.name} (ID: ${artifact.id}, Size: ${artifact.size_in_bytes} bytes, Created: ${artifact.created_at})`);
              });
              
              // Find the target artifact
              const targetArtifact = artifacts.artifacts.find(artifact => 
                artifact.name === artifactName
              );
              
              if (!targetArtifact) {
                console.error(`❌ Artifact '${artifactName}' not found in run ${runId}`);
                console.error('Available artifacts:');
                artifacts.artifacts.forEach(artifact => {
                  console.error(`  - ${artifact.name}`);
                });
                throw new Error(`Artifact '${artifactName}' not found in run ${runId}. Available: ${artifacts.artifacts.map(a => a.name).join(', ')}`);
              }
              
              console.log(`✅ Found artifact: ${targetArtifact.name} (ID: ${targetArtifact.id})`);
              
              // Download the artifact
              const downloadUrl = `https://api.github.com/repos/${owner}/${repo}/actions/artifacts/${targetArtifact.id}/zip`;
              console.log('Download URL:', downloadUrl);
              
              const { execSync } = require('child_process');
              const curlCommand = `curl -L -H "Authorization: token ${process.env.GITHUB_TOKEN}" -H "Accept: application/vnd.github.v3+json" "${downloadUrl}" -o artifact.zip`;
              console.log('Executing curl command...');
              execSync(curlCommand, { stdio: 'inherit' });
              
              // Check what we downloaded
              const fs = require('fs');
              const stats = fs.statSync('artifact.zip');
              console.log(`Downloaded file size: ${stats.size} bytes`);
              
              if (stats.size < 1000) {
                // File is too small, likely an error response
                const content = fs.readFileSync('artifact.zip', 'utf8');
                console.log('Downloaded content (likely error):', content);
                throw new Error(`Download failed - got error response: ${content}`);
              }
              
              // Extract the zip file
              console.log('Extracting artifact...');
              execSync('unzip -o artifact.zip', { stdio: 'inherit' });
              execSync('rm artifact.zip', { stdio: 'inherit' });
              
              // Find the APK file
              const files = fs.readdirSync('.');
              console.log('Extracted files:', files);
              
              const apkFile = files.find(file => file.endsWith('.apk'));
              if (apkFile) {
                console.log(`✅ APK downloaded: ${apkFile}`);
                core.setOutput('apk-file', apkFile);
              } else {
                throw new Error('No APK file found in downloaded artifact');
              }
              
            } catch (error) {
              console.error('❌ Failed to download APK:', error.message);
              console.error('Error details:', error);
              
              // Provide helpful debugging information
              console.log('');
              console.log('🔧 Debugging Tips:');
              console.log('1. Check if the source workflow run exists and completed successfully');
              console.log('2. Verify the artifact name matches exactly');
              console.log('3. Ensure the artifact hasn\'t expired (artifacts are deleted after 90 days)');
              console.log('4. Check if the source repository is accessible');
              console.log('');
              console.log('📋 Manual APK Download Instructions:');
              console.log('1. Go to the source workflow run');
              console.log('2. Download the APK artifact manually');
              console.log('3. Upload it to this workflow run');
              
              throw error;
            }
      
      - name: Run Maestro Tests on Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          arch: arm64-v8a
          ram-size: 2048M
          target: default
          script: |
            echo "Waiting for emulator to boot..."
            boot_completed=""
            until [[ "$boot_completed" == "1" ]]; do
              sleep 5
              boot_completed=$(adb -e shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')
              echo "boot_completed=$boot_completed"
            done
            echo "Emulator is ready."
            
            # Install the downloaded APK
            APK_FILE=$(find . -name "*.apk" | head -1)
            if [ -n "$APK_FILE" ]; then
              echo "Installing APK: $APK_FILE"
              adb install "$APK_FILE"
            else
              echo "No APK file found!"
              exit 1
            fi
            
            # Run Maestro tests
            maestro test android/ 